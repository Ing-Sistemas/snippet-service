plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	//id 'org.jlleitschuh.gradle.ktlint' version '12.1.1'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
    jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions:+'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor:+'
	implementation 'org.springframework.boot:spring-boot-starter-webflux' //bruhhh
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'com.h2database:h2'
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.mockito:mockito-core:4.11.0")
    testImplementation("org.mockito:mockito-inline:4.11.0")
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.0"
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.required.set(true)
	}
	classDirectories.setFrom(
			fileTree(
					dir: 'build/classes/kotlin/main',
					exclude: [
							"com/example/springboot/app/configuration/**",
							"com/example/springboot/app/external/**",
							"com/example/springboot/app/health/**",
							"com/example/springboot/app/utils/**",
					]
			)
	)
}

jacocoTestCoverageVerification {
	dependsOn test
	classDirectories.setFrom(
			fileTree(
					dir: 'build/classes/kotlin/main',
					exclude: [
							"com/example/springboot/app/configuration/**",
							"com/example/springboot/app/external/**",
							"com/example/springboot/app/health/**",
							"com/example/springboot/app/utils/**",
					]
			)
	)
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.10//CHANGE
			}
		}
	}
}

tasks.check {
	dependsOn jacocoTestCoverageVerification
}